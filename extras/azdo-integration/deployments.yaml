apiVersion: v1
kind: List
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: balancereader
    namespace: ${NAMESPACE}
    labels:
      application: ${APPLICATION}
      environment: ${ENVIRONMENT}
      dt.owner: ledger
      tier: backend
    annotations:
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: balancereader
        application: ${APPLICATION}
        environment: ${ENVIRONMENT}
        dt.owner: ledger
        tier: backend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        creationTimestamp: null
        labels:
          app: balancereader
          application: ${APPLICATION}
          environment: ${ENVIRONMENT}
          dt.owner: ledger
          tier: backend
      spec:
        containers:
        - env:
          - name: VERSION
            value: ${VERSION}
          - name: PORT
            value: "8080"
          - name: ENABLE_TRACING
            value: "true"
          - name: ENABLE_METRICS
            value: "true"
          - name: POLL_MS
            value: "100"
          - name: CACHE_SIZE
            value: "1000000"
          - name: JVM_OPTS
            value: ${JVM_OPTS}
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: DT_RELEASE_VERSION
            value: "${DT_RELEASE_VERSION}"
          - name: DT_RELEASE_BUILD_VERSION
            value: "${DT_RELEASE_BUILD_VERSION}"
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['environment']
          - name: DT_RELEASE_PRODUCT
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['application']
          envFrom:
          - configMapRef:
              name: environment-config
          - configMapRef:
              name: ledger-db-config
          name: balancereader
          image: ${REPOSITORY}/balancereader:${VERSION}
          imagePullPolicy: ${imagePullPolicy}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthy
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 500m
              ephemeral-storage: 512Mi
              memory: 512Mi
            requests:
              cpu: 100m
              ephemeral-storage: 512Mi
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /healthy
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /tmp/.ssh
            name: publickey
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: bank-of-anthos
        serviceAccountName: bank-of-anthos
        terminationGracePeriodSeconds: 5
        volumes:
        - emptyDir: {}
          name: tmp
        - name: publickey
          secret:
            defaultMode: 420
            items:
            - key: jwtRS256.key.pub
              path: publickey
            secretName: jwt-key
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
    labels:
      application: ${APPLICATION}
      environment: ${ENVIRONMENT}
      dt.owner: accounts
      tier: backend
    name: contacts
    namespace: ${NAMESPACE}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: contacts
        application: ${APPLICATION}
        environment: ${ENVIRONMENT}
        dt.owner: accounts
        tier: backend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        creationTimestamp: null
        labels:
          app: contacts
          application: ${APPLICATION}
          environment: ${ENVIRONMENT}
          dt.owner: accounts
          tier: backend
      spec:
        containers:
        - env:
          - name: VERSION
            value: ${VERSION}
          - name: PORT
            value: "8080"
          - name: ENABLE_TRACING
            value: "true"
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: DT_RELEASE_VERSION
            value: "${DT_RELEASE_VERSION}"
          - name: DT_RELEASE_BUILD_VERSION
            value: "${DT_RELEASE_BUILD_VERSION}"
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['environment']
          - name: DT_RELEASE_PRODUCT
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['application']
          - name: DT_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: DT_API_TOKEN
                name: dynatrace-secret
          - name: DT_ENDPOINT
            valueFrom:
              secretKeyRef:
                key: DT_ENDPOINT
                name: dynatrace-secret
          envFrom:
          - configMapRef:
              name: environment-config
          - configMapRef:
              name: accounts-db-config
          image: ${REPOSITORY}/contacts:${VERSION}
          imagePullPolicy: ${imagePullPolicy}
          name: contacts
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 250m
              ephemeral-storage: 256Mi
              memory: 128Mi
            requests:
              cpu: 100m
              ephemeral-storage: 256Mi
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /tmp/.ssh
            name: publickey
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: bank-of-anthos
        serviceAccountName: bank-of-anthos
        terminationGracePeriodSeconds: 5
        volumes:
        - emptyDir: {}
          name: tmp
        - name: publickey
          secret:
            defaultMode: 420
            items:
            - key: jwtRS256.key.pub
              path: publickey
            secretName: jwt-key
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
    labels:
      application: ${APPLICATION}
      environment: ${ENVIRONMENT}
      dt.owner: frontend
      tier: web
    name: frontend
    namespace: ${NAMESPACE}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: frontend
        application: ${APPLICATION}
        environment: ${ENVIRONMENT}
        dt.owner: frontend
        tier: web
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        creationTimestamp: null
        labels:
          app: frontend
          application: ${APPLICATION}
          environment: ${ENVIRONMENT}
          dt.owner: frontend
          tier: web
      spec:
        containers:
        - env:
          - name: VERSION
            value: ${VERSION}
          - name: PORT
            value: "8080"
          - name: ENABLE_TRACING
            value: "true"
          - name: SCHEME
            value: http
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: DEFAULT_USERNAME
            valueFrom:
              configMapKeyRef:
                key: DEMO_LOGIN_USERNAME
                name: demo-data-config
          - name: DEFAULT_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: DEMO_LOGIN_PASSWORD
                name: demo-data-config
          - name: REGISTERED_OAUTH_CLIENT_ID
            valueFrom:
              configMapKeyRef:
                key: DEMO_OAUTH_CLIENT_ID
                name: oauth-config
                optional: true
          - name: ALLOWED_OAUTH_REDIRECT_URI
            valueFrom:
              configMapKeyRef:
                key: DEMO_OAUTH_REDIRECT_URI
                name: oauth-config
                optional: true
          - name: DT_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: DT_API_TOKEN
                name: dynatrace-secret
          - name: DT_ENDPOINT
            valueFrom:
              secretKeyRef:
                key: DT_ENDPOINT
                name: dynatrace-secret
          - name: DT_RELEASE_VERSION
            value: "${DT_RELEASE_VERSION}"
          - name: DT_RELEASE_BUILD_VERSION
            value: "${DT_RELEASE_BUILD_VERSION}"
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['environment']
          - name: DT_RELEASE_PRODUCT
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['application']
          envFrom:
          - configMapRef:
              name: environment-config
          - configMapRef:
              name: service-api-config
          image: ${REPOSITORY}/frontend:${VERSION}
          imagePullPolicy: ${imagePullPolicy}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 30
          name: front
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /tmp/.ssh
            name: publickey
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: bank-of-anthos
        serviceAccountName: bank-of-anthos
        terminationGracePeriodSeconds: 5
        volumes:
        - emptyDir: {}
          name: tmp
        - name: publickey
          secret:
            defaultMode: 420
            items:
            - key: jwtRS256.key.pub
              path: publickey
            secretName: jwt-key
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ledgerwriter
    namespace: ${NAMESPACE}
    annotations:
    labels:
      application: ${APPLICATION}
      environment: ${ENVIRONMENT}
      dt.owner: ledger
      tier: backend
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ledgerwriter
        application: ${APPLICATION}
        environment: ${ENVIRONMENT}
        dt.owner: ledger
        tier: backend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        creationTimestamp: null
        labels:
          app: ledgerwriter
          application: ${APPLICATION}
          environment: ${ENVIRONMENT}
          dt.owner: ledger
          tier: backend
      spec:
        containers:
        - env:
          - name: VERSION
            value: ${VERSION}
          - name: PORT
            value: "8080"
          - name: ENABLE_TRACING
            value: "true"
          - name: ENABLE_METRICS
            value: "false"
          - name: JVM_OPTS
            value: ${JVM_OPTS}
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: DT_RELEASE_VERSION
            value: "${DT_RELEASE_VERSION}"
          - name: DT_RELEASE_BUILD_VERSION
            value: "${DT_RELEASE_BUILD_VERSION}"
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['environment']
          - name: DT_RELEASE_PRODUCT
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['application']
          envFrom:
          - configMapRef:
              name: environment-config
          - configMapRef:
              name: service-api-config
          - configMapRef:
              name: ledger-db-config
          image: ${REPOSITORY}/ledgerwriter:${VERSION}
          imagePullPolicy: ${imagePullPolicy}
          name: ledgerwriter
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 500m
              ephemeral-storage: 512Mi
              memory: 512Mi
            requests:
              cpu: 100m
              ephemeral-storage: 512Mi
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /tmp/.ssh
            name: publickey
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: bank-of-anthos
        serviceAccountName: bank-of-anthos
        terminationGracePeriodSeconds: 5
        volumes:
        - emptyDir: {}
          name: tmp
        - name: publickey
          secret:
            defaultMode: 420
            items:
            - key: jwtRS256.key.pub
              path: publickey
            secretName: jwt-key
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
    labels:
      application: ${APPLICATION}
      environment: ${ENVIRONMENT}
      dt.owner: ledger
      tier: backend
    name: transactionhistory
    namespace: ${NAMESPACE}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: transactionhistory
        application: ${APPLICATION}
        environment: ${ENVIRONMENT}
        dt.owner: ledger
        tier: backend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        creationTimestamp: null
        labels:
          app: transactionhistory
          application: ${APPLICATION}
          environment: ${ENVIRONMENT}
          dt.owner: ledger
          tier: backend
      spec:
        containers:
        - env:
          - name: VERSION
            value: ${VERSION}
          - name: PORT
            value: "8080"
          - name: ENABLE_TRACING
            value: "true"
          - name: ENABLE_METRICS
            value: "true"
          - name: POLL_MS
            value: "100"
          - name: CACHE_SIZE
            value: "1000"
          - name: CACHE_MINUTES
            value: "60"
          - name: HISTORY_LIMIT
            value: "100"
          - name: JVM_OPTS
            value: ${JVM_OPTS}
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: EXTRA_LATENCY_MILLIS
            value: "${EXTRA_LATENCY_MILLIS}"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: DT_RELEASE_VERSION
            value: "${DT_RELEASE_VERSION}"
          - name: DT_RELEASE_BUILD_VERSION
            value: "${DT_RELEASE_BUILD_VERSION}"
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['environment']
          - name: DT_RELEASE_PRODUCT
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['application']
          envFrom:
          - configMapRef:
              name: environment-config
          - configMapRef:
              name: ledger-db-config
          image: ${REPOSITORY}/transactionhistory:${VERSION}
          imagePullPolicy: ${imagePullPolicy}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthy
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          name: transactionhistory
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 500m
              ephemeral-storage: 512Mi
              memory: 512Mi
            requests:
              cpu: 100m
              ephemeral-storage: 512Mi
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /healthy
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /tmp/.ssh
            name: publickey
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: bank-of-anthos
        serviceAccountName: bank-of-anthos
        terminationGracePeriodSeconds: 5
        volumes:
        - emptyDir: {}
          name: tmp
        - name: publickey
          secret:
            defaultMode: 420
            items:
            - key: jwtRS256.key.pub
              path: publickey
            secretName: jwt-key
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
    labels:
      application: ${APPLICATION}
      environment: ${ENVIRONMENT}
      dt.owner: accounts
      tier: backend
    name: userservice
    namespace: ${NAMESPACE}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: userservice
        application: ${APPLICATION}
        environment: ${ENVIRONMENT}
        dt.owner: accounts
        tier: backend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        creationTimestamp: null
        labels:
          app: userservice
          application: ${APPLICATION}
          environment: ${ENVIRONMENT}
          dt.owner: accounts
          tier: backend
      spec:
        containers:
        - env:
          - name: VERSION
            value: ${VERSION}
          - name: PORT
            value: "8080"
          - name: ENABLE_TRACING
            value: "true"
          - name: TOKEN_EXPIRY_SECONDS
            value: "3600"
          - name: PRIV_KEY_PATH
            value: /tmp/.ssh/privatekey
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: DT_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: DT_API_TOKEN
                name: dynatrace-secret
          - name: DT_ENDPOINT
            valueFrom:
              secretKeyRef:
                key: DT_ENDPOINT
                name: dynatrace-secret
          - name: DT_RELEASE_VERSION
            value: "${DT_RELEASE_VERSION}"
          - name: DT_RELEASE_BUILD_VERSION
            value: "${DT_RELEASE_BUILD_VERSION}"
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['environment']
          - name: DT_RELEASE_PRODUCT
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['application']
          envFrom:
          - configMapRef:
              name: environment-config
          - configMapRef:
              name: accounts-db-config
          image: ${REPOSITORY}/userservice:${VERSION}
          imagePullPolicy: ${imagePullPolicy}
          name: userservice
          ports:
          - containerPort: 8080
            name: http-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 500m
              ephemeral-storage: 256Mi
              memory: 256Mi
            requests:
              cpu: 260m
              ephemeral-storage: 256Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /tmp/.ssh
            name: keys
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: bank-of-anthos
        serviceAccountName: bank-of-anthos
        terminationGracePeriodSeconds: 5
        volumes:
        - emptyDir: {}
          name: tmp
        - name: keys
          secret:
            defaultMode: 420
            items:
            - key: jwtRS256.key
              path: privatekey
            - key: jwtRS256.key.pub
              path: publickey
            secretName: jwt-key
